1.CAS的传入参数为三个时，第一个为要改的对象
cas(Object obj,expected期望值,updated新值) 自旋
for(;;)
如果当前m值==0 M=1
cpu添加屏障 原语cas
2.synchronized和AtomicLong以及LongAdder分别对count进行自增操作的效率对比:
在一万次并发的情况下LongAdder的时间少于AtomicLong少于LongAdder
LongAdder分段锁：
使用一个数组，不同数量的线程分组并且分别锁定数组中一个元素，在所有线程运行完毕后，再把数组中的所有元素值加在一起就可以
3.ReentrantLock的优势
1.可以使用lockInterruptibly打断某线程的等待
2.可以使用tryLock指定在多少时间内获得锁，如果获得不到，直接放弃
3.可以使用公平锁，在使用aqs队列中，公平锁可以让等待最久的线程先进行运行，但是这并不是绝对公平的，在打印中可能看到某个线程
会多次获得锁，原因就是他可能多次入队列，并且入队列的速度很快，多次执行时都先于后面的线程排在队列前面，所以每次都是自己先执行，直到
后面有线程到了等待队列中去
3.juc包下的常见锁：
1.CountDownLatch:
有点像门栓，设定一个初始值，每个线程都会对这个值进行countdown，直到0为止，才会执行主线程await后面的代码，使用代码实例：
