add方法：

    public void add(int index, E element) {
        rangeCheckForAdd(index);
        //保证数组有size+1的大小
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        //将数组从index到最后的元素移动到index+1开始以后
        System.arraycopy(elementData, index, elementData, index + 1,
                         size - index);
        elementData[index] = element;
        //增加size大小
        size++;
    }
    
    private void ensureCapacityInternal(int minCapacity) {
        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
    }


    private static int calculateCapacity(Object[] elementData, int minCapacity) {
        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
            return Math.max(DEFAULT_CAPACITY, minCapacity);
        }
        return minCapacity;
    }
       
        private void ensureExplicitCapacity(int minCapacity) {
        modCount++;

        // overflow-conscious code
        //大小不够扩容
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
    }
    
        private void grow(int minCapacity) {
        // overflow-conscious code
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity + (oldCapacity >> 1);
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
    }
    
        private static int hugeCapacity(int minCapacity) {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
    }
remove方法：
    public E remove(int index) {
        rangeCheck(index);

        modCount++;
        E oldValue = elementData(index);
        //计算需要移动的元素
        int numMoved = size - index - 1;
        if (numMoved > 0)
            //移动到前面去
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        //最后一个元素赋值为null，让gc去回收
        elementData[--size] = null; // clear to let GC do its work

        return oldValue;
    }


